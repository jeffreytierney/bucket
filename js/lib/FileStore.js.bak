;(function(scope) {
  
  var storage_increment = (1024*1024*100), // 100 MB
      cur_quota = 0;
      
      
  function getFileKey(data, type) {
    return CryptoJS.MD5(data).toString() + getFileExtension(type);
  }
  
  function getFileExtension(type) {
    switch(type.toLowerCase()) {
      case "image/jpeg":
      case "image/jpg":
        return ".jpg";
      case "image/png":
        return ".png";
      case "image/gif":
        return ".gif";
    }
    return ".jpg";
  }
  
  
  function Store(options, onSupport, onNoSupport) {
    options = options || {};
    if (typeof options === "function") {
      onNoSupport = onSupport;
      onSupport = options;
      options = {};
    }
    
    this.opt = {};
    for(var opt in options) {
      this.opt[opt] = options[opt];
    }
    
    this.init(onSupport, onNoSupport);
  };

  Store.prototype = {
    constructor: Store.prototype.constructor,
    init: function(onSupport, onNoSupport) {
      
      if(!this._support(onSupport, onNoSupport)) { return this; }
      return this;
    },
    _support: function(onSupport, onNoSupport) {
      window.requestFileSystem  = window.requestFileSystem || 
                                  window.webkitRequestFileSystem ||
                                  window.mozRequestFileSystem;
                                  
      window.StorageInfo        = window.StorageInfo ||
                                  window.webkitStorageInfo ||
                                  window.mozStorageInfo;
                                  
      window.BlobBuilder        = window.BlobBuilder ||
                                  window.WebKitBlobBuilder ||
                                  window.mozBlobBuilder;
                                  
                                  
      this.support = !!(window.requestFileSystem && window.StorageInfo && window.BlobBuilder && window.JSON);
      this.enabled = false;
      this.checkQuota();
      
      if(this.support) {
        onSupport && onSupport.call(this);
      }
      else {
        onNoSupport && onNoSupport.call(this);
      }
      
      return this.support;
    },
    checkQuota: function(success, error) {
      success = success || function(usage, quota) { this.enabled = !!quota; };
      error   = error   || function(ex) { console.log("Error checking quota: ", ex.message); };
      if(!this.support) {
        error.call(window, {});
      }
      else {
        window.StorageInfo.queryUsageAndQuota(window.PERSISTENT, success, error);
      }
    },
    checkQuotaAndRequest: function(cb, forceRequest) {
      cb = prepCallback(cb);
      
      if(!this.support) {
        cb.error.call(window);
      }
      
      var _this = this;
      if(this.support) {
        this.checkQuota(
          function(usage, quota) { 
            _this.enabled = !!quota;
            cur_quota = quota;
            if(forceRequest || (quota - usage < (1024*1024))) { 
              _this.requestPermission(quota+storage_increment, function(bytes_granted) {
                cb.success && cb.success.call(window);
              });
            }
            else {
              cb.success && cb.success.call(window);
            }
          },
          cb.error
        )
      }
    },
    requestPermission: function(bytes, success, error) {
      if(typeof bytes === "function" && typeof error === "undefined") {
        error   = success;
        success = bytes;
        bytes   = storage_increment;
      }
      
      success = success || function(bytes_granted) { this.support = true;  };
      error   = error   || function(ex) { this.support = false; console.log("Error requesting storage: ", ex.message); };
      
      window.StorageInfo.requestQuota(window.PERSISTENT, bytes, success, error);
      
    },
    fetchAndStore: function(src, cb) {
        var xhr;
        try { xhr= new XMLHttpRequest();} 
         catch (e) { try { xhr = new ActiveXObject("Microsoft.XMLHTTP"); } 
          catch (e) {return false;}
        }
         xhr.responseType = "arraybuffer"
         xhr.open("GET", src);
         xhr.onreadystatechange = function() {
          if(xhr.readyState != 4) { return; }
          if(xhr.status==200) { ajax_success(xhr, src); }
          return true;
         };
         xhr.send(null);
         
      var _this = this;
      function ajax_success(xhr, src) {
        var data = xhr.response;
        _this.store(data, xhr.getResponseHeader("Content-Type"), cb);
      }
    },
    getFile: function(key, cb) {
      return this.get(key, cb);
    },
    getFileEntry: function(key, cb) {
      if(!this.support) { return null; }
      cb = prepCallback(cb);

      var onFSLoad = function(fs) { 

        fs.root.getFile(key, {}, function(fileEntry) {
          
          cb.success && cb.success.call(window, fileEntry);

        }, cb.error);
      }

      window.requestFileSystem(window.PERSISTENT, cur_quota, onFSLoad, cb.error);
    },
    get: function(key, cb) {
      if(!this.support) { return null; }
      cb = prepCallback(cb);
      
      var onFSLoad = function(fs) { 
        
        fs.root.getFile(key, {}, function(fileEntry) {
          // Get a File object representing the file,
          // then use FileReader to read its contents.
          fileEntry.file(function(file) {
            //console.log(file.type);
             var reader = new FileReader();

             reader.onloadend = function(e) {
               
               var val = {};
               try {
                 //console.log(this.result)
                 val = this.result;
               }
               catch(e) {
                 console.log(e.message)
                 //console.log(this.result);
               }
               cb.success && cb.success.call(window, val, file);
             };
             //console.log(reader)
             reader.readAsText(file);
          }, cb.error);
        }, cb.error);
      }
      
      window.requestFileSystem(window.PERSISTENT, cur_quota, onFSLoad, cb.error);
    },
    getAsDataURL: function(key, cb) {
      if(!this.support) { return null; }
      cb = prepCallback(cb);
      
      var onFSLoad = function(fs) { 
        
        fs.root.getFile(key, {}, function(fileEntry) {
          // Get a File object representing the file,
          // then use FileReader to read its contents.
          fileEntry.file(function(file) {
            //console.log(file.type);
             var reader = new FileReader();

             reader.onloadend = function(e) {
               
               var val = {};
               try {
                 val = this.result;
               }
               catch(e) {
                 console.log(e.message)
                 //console.log(this.result);
               }
               cb.success && cb.success.call(window, val, file);
             };
             //console.log(reader)
             reader.readAsDataURL(file);
          }, cb.error);
        }, cb.error);
      }
      
      window.requestFileSystem(window.PERSISTENT, cur_quota, onFSLoad, cb.error);
    },
    store: function(val, type, cb) {
      
      if(!this.support) { return null; }
      
      cb = prepCallback(cb);
      var _this = this;
      var onFSLoad = function(fs) { 
        
        var bb = new BlobBuilder();
        bb.append(val);
        var f = new FileReader();
        f.onload = function(on_e) {
          //console.log(on_e.target.result);
          var key = getFileKey(on_e.target.result, type);
            fs.root.getFile(key, {create:true}, function(fileEntry) {
              // Create a FileWriter object for our FileEntry (log.txt).
              fileEntry.createWriter(function(fileWriter) {

                // apparently writing a file does not clear out the old one first
                // so if overwriting with a shorter file, it leaves cruft at the end
                // so truncate first
                fileWriter.truncate(0);

                var truncated = false, 
                    length;

                fileWriter.onwriteend = function(e) {
                  // but truncate also triggers onwriteend
                  // so check for that here and re-call the actual write after truncation
                  if(!truncated) { 
                    truncated = true;
                    doWrite(val, fileWriter);
                  }


                  else {
                    // then only call the success handler on the real write.
                    // fun, right?
                    //console.log('Write completed.');
                    cb.success && cb.success.call(window);
                  }
                };

                fileWriter.onerror = function(e) {
                  cb.error && cb.error.call(window, e)
                };

                function doWrite(val, fileWriter) {
                  var blob = bb.getBlob(type || "image/jpeg")
                  //console.log(blob);
                  //console.log(fileWriter);
                  fileWriter.write(blob);
                }
              }, cb.error);
            }, cb.error);
          }
          f.readAsDataURL(bb.getBlob());
        }
      
      
      
      window.requestFileSystem(window.PERSISTENT, cur_quota, onFSLoad, cb.error);
      return this;
    },
    remove: function(key, cb) {
      if(!this.support) { return null; }
      
      cb = prepCallback(cb);
      
      
      window.requestFileSystem(window.PERSISTENT, cur_quota, function(fs) {
        fs.root.getFile(key, {create: false}, function(fileEntry) {

          fileEntry.remove(function() {
            cb.success && cb.success.call(window);
            //console.log('File removed.');
          }, cb.error);

        }, cb.error);
      }, cb.error);
      
    },
    listKeys: function(cb) {
      if(!this.support) { return null; }
      
      cb = prepCallback(cb);
     
      var onInitFs = function(fs) {

        var dirReader = fs.root.createReader();
        var entries = [];

        // Call the reader.readEntries() until no more results are returned.
        var readEntries = function() {
           dirReader.readEntries (function(results) {
            if (!results.length) {
              cb.success && cb.success.call(window, entries.sort());
            } else {
              entries = entries.concat(toArray(results));
              readEntries();
            }
          }, cb.error);
        };

        readEntries(); // Start reading dirs.

      }
      
      window.requestFileSystem(window.PERSISTENT, cur_quota, onInitFs, cb.error);
    },
    clear: function(cb) {
      // TODO: this
      var _this = this;
      this.listKeys(function(results) {
        var keys = results.map(function(file) { return file.name; });
        keys.forEach(function(key) { _this.remove(key); });
      });
    }
  };
  
  
  function toArray(list) {
    return Array.prototype.slice.call(list || [], 0);
  }
  
  function prepCallback(cb) {
    cb = cb || {};
    if(typeof cb === "function") { cb = { success: cb } };
    cb.success = cb.success || function() { };
    cb.error = cb.error || function(ex) { console.log(ex); };

    return cb;
  }

  scope.FileStore = Store;

})(this);